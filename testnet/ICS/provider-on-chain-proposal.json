{
    // Title of the proposal
    "title": "Comdex testnet on ICS",
    // Description of the proposal
    // format the text as a .md file and include the file in your onboarding repository
    "description": "Migrate Comdex as a sovereign chain to Comdex as a consumer chain.",
    // Summary of the proposal
    "summary": "Migrate Comdex as a sovereign chain to Comdex as a consumer chain.",
    // Metadata of the proposal
    "metadata": "NA",
    // Proposed chain-id of the new consumer chain.
    // Must be unique from all other consumer chain ids of the executing provider chain.
    "chain_id": "comdex-test3",
    // Initial height of new consumer chain.
    "initial_height" : {
        "revision_number": 1,
        "revision_number": 12951054,
    },
    // Time on the provider chain at which the consumer chain genesis is finalized and all validators
    // will be responsible for starting their consumer chain validator node.
    // Time should arrive before the upgrade height
    "spawn_time": "2024-07-16T15:00:00Z",
    // Unbonding period for the consumer chain.
    // It should should be smaller than that of the provider.
    "unbonding_period": 1209600000000000,
    // Timeout period for CCV related IBC packets.
    // Packets are considered timed-out after this interval elapses.
    "ccv_timeout_period": 2419200000000000,
    // IBC transfer packets will timeout after this interval elapses.
    "transfer_timeout_period": 3600000000000,
    // The fraction of tokens allocated to the consumer redistribution address during distribution events.
    // The fraction is a string representing a decimal number. For example "0.75" would represent 75%.
    // The reward amount distributed to the provider is calculated as: 1 - consumer_redistribution_fraction.
    "consumer_redistribution_fraction": "0.85",
    // BlocksPerDistributionTransmission is the number of blocks between IBC token transfers from the consumer chain to the provider chain.
    // eg. send rewards to the provider every 1000 blocks
    "blocks_per_distribution_transmission": 100,
    // The number of historical info entries to persist in store.
    // This param is a part of the cosmos sdk staking module. In the case of
    // a ccv enabled consumer chain, the ccv module acts as the staking module.
    "historical_entries": 10000,
    // The ID of a token transfer channel used for the Reward Distribution
	// sub-protocol. If DistributionTransmissionChannel == "", a new transfer
	// channel is created on top of the same connection as the CCV channel.
	// Note that transfer_channel_id is the ID of the channel end on the consumer chain.
    // it is most relevant for chains performing a standalone to consumer changeover
    // in order to maintain the existing ibc transfer channel
    "distribution_transmission_channel": "channel-25"  // NOTE: use existing transfer channel if available
    // Corresponds to the percentage of validators that have to validate the chain under the Top N case.
    // For example, 53 corresponds to a Top 53% chain, meaning that the top 53% provider validators by voting power
    // have to validate the proposed consumer chain. top_N can either be 0 or any value in [50, 100].
    // A chain can join with top_N == 0 as an Opt In chain, or with top_N âˆˆ [50, 100] as a Top N chain.
    "top_N": 0,
    //Proposal deposit
    "deposit": "100000000uatom"
}
